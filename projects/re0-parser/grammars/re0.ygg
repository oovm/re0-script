grammar LifeRestart {

}
class Root {
    TopStatement* EOI
}
union TopStatement {
    | PropertyStatement
    | TraitGroup
    | TraitStatement
    | EventGroup
    | EventStatement
    | EOS
}
class EOS {
    /;/
}
// === 定义属性 === ---------------------------------------------------------------------------------------------------------
class PropertyStatement {
    ^KW_PROPERTY Identifier '{' PropertyItem* '}'
}

union PropertyItem {
    | IdStatement
    | DescriptionStatement
    | RequirementStatement
    | OptionStatement
    | EnumerateStatement
    | CharacterStatement
    | EOS
}
class IdStatement {
    ^KW_ID Integer
}
class DescriptionStatement {
    ^KW_DESCRIPTION String? | '[' (String|^EOS)* ']'
}
class EnumerateStatement {
    ^KW_ENUMERATE '[' (variant:Identifier|^COMMA)* ']'
}
class OptionStatement {
    ^KW_OPTIONS (
    | '[' (OptionItem|^COMMA)* ']'
    | '{' (OptionItem|^COMMA)* '}'
    )
}
class OptionItem {
    (weight:Integer ^COLON)? variant:Identifier
}
// === 定义天赋 === ---------------------------------------------------------------------------------------------------------
class TraitGroup {
    ^KW_TRAIT_GROUP Identifier '{' TraitStatement* '}'
}
class TraitStatement {
    ^KW_TRAIT Identifier '{' (TraitItem|^EOS)* '}'
}

union TraitItem {
    | IdStatement
    | DescriptionStatement
    | RequirementStatement
    | EffectStatement
}
class TraitProperty {
    Identifier ':' Atomic
}
class RequirementStatement {
    ^KW_REQUIREMENT '{' Statement* '}'
}
class EffectStatement {
    ^KW_EFFECT '{' Statement* '}'
}
// === 事件 === ---------------------------------------------------------------------------------------------------------
class EventGroup {
    ^KW_EVENT_GROUP Identifier '{' EventStatement* '}'
}

class EventStatement {
    ^KW_EVENT Identifier '{' (EventItem|^EOS)* '}'
}

union EventItem {
    | IdStatement
    | DescriptionStatement
    | RequirementStatement
    | OptionStatement
}

class EventProperty {
    Identifier
}
// === 事件 === ---------------------------------------------------------------------------------------------------------
class CharacterStatement {
    ^KW_CHARACTER '{' Statement* '}'
}
// === 表达式 === ---------------------------------------------------------------------------------------------------------
union Statement {
    | IfStatement
    | Expression
    | EOS
}
// === 表达式 === ---------------------------------------------------------------------------------------------------------
class IfStatement {
    IfThenBlock IfElseIfBlock? IfElseBlock?
}
class IfThenBlock {
    ^KW_IF Expression '{' Statement* '}'
}
class IfElseIfBlock ^ {
    (KW_ELSE_IF|KW_ELSE KW_IF) ^Expression '{' ^Statement* '}'
}
class IfElseBlock {
    ^KW_ELSE '{' Statement* '}'
}
// === 表达式 === ---------------------------------------------------------------------------------------------------------
atomic class Expression {
    Term (HIDE Infix ~ Term)
}
atomic class Term {
    (Prefix HIDE)* Atomic (HIDE Suffix)*
}

@style(operator)
@railway(false)
union Prefix {
    | /不是|非|!/
}

@style(operator)
@railway(false)
union Infix {
    | /[加+]/      #Add
    | /增加|\+=/    #AddAssign
    | /[减\-]/     #Sub
    | /[减少\-=]/   #SubAssign
    | /大于|>/     #GT
    | /大于等于|>=/ #GEQ
    | /小于|</     #LT
    | /小于等于|<=/ #LEQ
    | /为|等于|==/  #EQ
    | /不等于|!=/   #NE
    | /有|has|contains/   #Has
    | /&&|且/      #And
    | /\|\||或/    #Or
}
@style(operator)
@railway(false)
union Suffix {
    | DotCall
}
// === 表达式 === ---------------------------------------------------------------------------------------------------------
class DotCall {
    DOT Identifier
}
// === 表达式 === ---------------------------------------------------------------------------------------------------------
@railway(false)
union Atomic {
    | List
    | Identifier
    | Integer
    | StringRaw
    | StringNormal
    | Boolean
}
class List {
    '[' (Atomic (COMMA Atomic)* COMMA?)? ']'
}
// === 表达式 === ---------------------------------------------------------------------------------------------------------
atomic union String {
    | StringRaw
}

atomic class StringRaw {
    "'" StringRawText "'"
}

text class StringRawText {
    /[^']*/
}

atomic class StringNormal {
    '"' StringItem* '"'
}

union StringItem {
    | EscapedUnicode
    | EscapedCharacter
    | TextAny
}

atomic class EscapedUnicode {
    '\u{' HEX '}'
}

atomic class EscapedCharacter {
    /\\./
}

text class HEX {
    [0-9a-fA-F]{1, 6}
}

text class TextAny {
    /[^"\\]+/
}

text class Identifier {
    /\p{XID_start}\p{XID_continue}*/
}

text class Integer {
    /0|[1-9][0-9]*/
}

union Boolean {
    | /真|true/ #True
    | /假|false/ #False
}

@railway(false)
token {
    COMMA: /,/
    COLON: /:/
}

@railway(false)
@style(keyword)
token {
    KW_PROPERTY: /属性|property/
    KW_TRAIT_GROUP: /特质组|特征组|天赋组|(trait|talent)s|(trait|talent)-group/
    KW_TRAIT: /特质|特征|天赋|trait|talent/
    KW_EVENT_GROUP: /故事组|事件组|events|event-group/
    KW_EVENT: /故事|事件|event/
    KW_CHARACTER: /人物|角色|character|npc/
    KW_ID:/编号|[Ii][Dd]/
    KW_DESCRIPTION: /动态文本|动态描述|文本|描述|details?/
    KW_REQUIREMENT: /出现要求|要求|requires?/
    KW_EFFECT: /效果|一次性效果|effects?/
    KW_ENUMERATE: /枚举|enumerate/
    KW_OPTIONS: /选项|options/
    KW_IF: /若|如果|if/
    KW_ELSE_IF: /或|或者|elseif/
    KW_ELSE: /否则|else/
}

@railway(false)
hide class WhiteSpace {
    /\p{White_Space}+/
}

@style(comment)
@railway(false)
hide class Comment {
    | /\/\/[^\n\r]*/
    | '/*' '*/'
}
